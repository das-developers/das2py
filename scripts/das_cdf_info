#!/usr/bin/env python3

import sys
import argparse
from os.path import basename as bname

# On windows & mac you can "pip install das2py" to get this.
#
# You'll also need the CDF library installed on your local
# computer to provide the backing dllcdf.dll/libcdf.so.  You
# can get it here:
#    https://cdf.gsfc.nasa.gov/html/sw_and_docs.html
# Get verision v3.9.

import das2.pycdf
import das2.pycdf.const

def compStr(nUnhashable):
	""" 
	The CDF c_long types are not hashable, can't use a direct dictionary lookup
	"""
	if nUnhashable == das2.pycdf.const.NO_COMPRESSION : return "No Compression"
	if nUnhashable == das2.pycdf.const.RLE_COMPRESSION : return "RLE Compression"
	if nUnhashable == das2.pycdf.const.HUFF_COMPRESSION : return "Huffman Compression"
	if nUnhashable == das2.pycdf.const.AHUFF_COMPRESSION : return "Adaptive Huffman Compression"
	if nUnhashable == das2.pycdf.const.GZIP_COMPRESSION : return "GZip Compression"

	return str(nUnhashable)

# ########################################################################## #

def main():
	"""A little utility to print the structure of a CDF file"""
	
	psr = argparse.ArgumentParser(
		description="A CDF info printer based on pycdf from Triad National Security, LLC"
	)
		
	# End command line with list of files to validate...
	psr.add_argument(
		'lFiles', help='The file(s) to validate', nargs='+', metavar='file'
	)
	
	opts = psr.parse_args()	
	
	for sFile in opts.lFiles:	
		try:

			f = das2.pycdf.CDF(sFile)
			print("Structure of: %s"%bname(sFile))

			for ak in f.attrs:
				print(ak, "=", f.attrs[ak])
	
			print()

			for vk in f.keys():
				print("%s  (%s)"%(vk, compStr( f[vk].compress()[0] ) ))
				print(f[vk])
				print(f[vk].attrs)
	
				# Now print the first record
				print( f[vk].shape)
				if len(f[vk].shape) == 1:
					print( f[vk][:] )
				else:
					if f[vk].shape[0] > 0:
						print( f[vk][0,:] )
	
				print()
				
			f.close()

		except (ValueError, IOError) as e:
			pout("%s [ERROR]"%str(e))
			return 13
			
	return 0	

# ########################################################################## #
if __name__ == "__main__":
	sys.exit(main())

