<?xml version="1.0"?>
<!-- 
	This is a single-root schema definition intended for complete das streams
  contained within a single XML document.  Das documents are not nearly as 
  common as das2 packetized streams, though they are useful for small datasets.

  Clients should strive to accept both types.

  The major differences between das documents and das streams are:

    1. The top level element <stream> contains all other elements

    2. The new sub element <d> (for data) provides packet data.

    3. The "encoding" attribute is dropped, UTF-8 is the expected 
       encoding for all values.

    4. All values are assumed to be variable length, so itemBytes is 
       no longer required

    5. The elements <comment> and <exception> are not included since
       these are ment for real-time information.

  See the file das-basic-stream-v3.0.xsd for a multi-root schema definition
  suitable for validating packetized streams.
-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  version="3.0"
  xmlns="das-basic-doc"
  targetNamespace="das-basic-doc"
  elementFormDefault="qualified"
  attributeFormDefault="unqualified"
>

<!-- General Fields -->

<!-- The names for things that could be variables in most languages -->
<xs:simpleType name="VarName">
  <xs:restriction base="xs:string">
    <xs:pattern value="[a-zA-Z][a-zA-Z0-9_]*"/>
    <xs:maxLength value="63"/> <!-- leave rooom for null char -->
  </xs:restriction>
</xs:simpleType>

<!-- The names for things that could be variables or struct + member 
     names in most languages -->
<xs:simpleType name="StructName">
  <xs:restriction base="xs:string">
    <xs:pattern value="[a-zA-Z][a-zA-Z0-9_\.\-,:]*"/>
    <xs:maxLength value="63"/> <!-- leave rooom for null char -->
  </xs:restriction>
</xs:simpleType>

<!-- Parameter dimension names, typically physical dimensions. Absense of a
     physical dimension can be indicated by an explicit empty string  -->
<xs:simpleType name="PhysDimName">
  <xs:restriction base="xs:string">
    <xs:pattern value="[*]{0}|[a-zA-Z][a-zA-Z0-9_\.]*"/>
    <xs:maxLength value="63"/> <!-- leave rooom for null char -->
  </xs:restriction>
</xs:simpleType>

<!-- Properties ========================================================== -->

<xs:simpleType name="PropName">
  <xs:restriction base="xs:string">
    <xs:pattern value="[a-zA-Z][a-zA-Z0-9_\.\-,:]*"/>
    <xs:maxLength value="63"/> <!-- leave rooom for null char -->
  </xs:restriction>
</xs:simpleType>

<!-- Alt prop by language -->
<xs:simpleType name="ISO639_1">
  <xs:restriction base="xs:string">
    <xs:pattern value="[a-zA-Z][a-zA-Z0-9_\-]+"/>
    <xs:maxLength value="8"/> <!-- leave rooom for null char -->
  </xs:restriction>
</xs:simpleType>

<xs:complexType name="AltProp">
  <xs:simpleContent>
    <xs:extension base="xs:string" >
      <xs:attribute name="lang" type="ISO639_1" use="required" />
    </xs:extension>
  </xs:simpleContent>
</xs:complexType>

<!-- The data types for properties. Same as ValueType below with ranges -->
<xs:simpleType name="PropType">
  <xs:restriction base="xs:string">
    <xs:enumeration value="boolean" />
    <xs:enumeration value="datetime" />
    <xs:enumeration value="datetimeRange" />
    <xs:enumeration value="integer" />
    <xs:enumeration value="integerRange" />
    <xs:enumeration value="real" />
    <xs:enumeration value="realRange" />
    <xs:enumeration value="string" />
   </xs:restriction>
</xs:simpleType>



<!-- Single property -->
<xs:complexType name="Property" mixed="true">
   <xs:sequence>
     <xs:element name="alt" type="AltProp" minOccurs="0" maxOccurs="unbounded" />
   </xs:sequence>
   <xs:attribute name="name"  type="PropName" use="required" />
   <xs:attribute name="valType"  type="PropType" default="string" />
   <xs:attribute name="units" type="xs:token" />
</xs:complexType>

<!-- Properties grouping -->
<xs:complexType name="Properties">
  <xs:sequence>
    <xs:element name="p" type="Property" minOccurs="0" maxOccurs="unbounded"/>
  </xs:sequence>
</xs:complexType>


<!-- Extensions ========================================================== -->

<!-- Extension tags can hold anything except for elements defined in this
  namespace.  They can also have any attributes.  Client stream processors
  should pass stream-level extension elements unchanged dataset level 
  extension element handling is undefined 
-->
<xs:complexType name="Extension" mixed="true">
  <xs:sequence>
    <xs:choice>
      <!-- Can extend with other elements here, but they can't be from this namespace -->
      <xs:any namespace="##other" processContents="skip" minOccurs="0" maxOccurs="unbounded"/>
    </xs:choice>
  </xs:sequence>

  <xs:attribute name="scheme" type="xs:string" use="required"/>
  <xs:attribute name="content" type="xs:string" use="required"/>

  <!-- Can extend with other attributes, will be skipped by schema -->
  <xs:anyAttribute processContents="skip" />
</xs:complexType>


<!-- Datasets ============================================================ -->

<!-- Each packet header defines a das dataset and how it appears in the data
     stream.  The object containment hirearchy is depected in the middle of
     the reference poster, 
     
        https://das2.org/das2_AGU2019.pdf 
         
     and summarized below:
     
       Stream
         |
         |- Dataset 1
         |- Dataset 2
         |- Dataset 3
         |- .....
       
       Dataset  <dataset>
         |
         |- Physical Dimension <physDim>
             |
             |- Variable        <scalar> <vector>
                 |
                 |- Quantities   <values> <sequence> <i>
-->

<!-- The understood plot type strings -->
<xs:simpleType name="PlotType">
  <xs:restriction base="xs:string">
    <xs:pattern
      value="(cartesian2d|cartesian3d|polar|cylindrical|spherical)(:movie)?"
    />
  </xs:restriction>
</xs:simpleType>

<xs:simpleType name="Direction">
  <xs:restriction base="xs:string">
    <xs:enumeration value="x" />
    <xs:enumeration value="y" />
    <xs:enumeration value="z" />
    <xs:enumeration value="ρ" /> <!-- radius cylindrical -->
    <xs:enumeration value="r" /> <!-- radius spherical & polar -->
    <xs:enumeration value="θ" /> <!-- polar angle -->
    <xs:enumeration value="φ" /> <!-- azimuthal angle in x-y plane -->
    <xs:enumeration value="t" /> <!-- for movies, not time on a space axis -->
  </xs:restriction>
</xs:simpleType>

<!-- The Index space definition for this dataset.

  Just as the plot type can define the graphical space for a dataset,
  this defines the value lookup space.

  How to read the Dataset Index Space definition:

  1. There are always as many positions in the index space definition as
     the dataset rank.  Aka rank 2, ==> "max_index1 ; max_index2"

  2. Each full location in index space denotes how to lookup a single 
     item.

  3. The special size "*" means "fills the container", this is typically
     used with the first index.  It means the size of the full dataset in
     the first index is just equal to the number of records you happen to
     get.  If "*" appears in subsequent indexes, it means you have variable
     length packets.
-->
<xs:simpleType name="DsIndexShape">
  <xs:restriction base="xs:string">
    <xs:pattern
      value="(\*|[1-9][0-9]*)(;(\*|[1-9][0-9]*))*"
    />
  </xs:restriction>
</xs:simpleType>

<!-- The shape of a Variable in index space

  How to read the index shape:

  1. There are always as many elements as the dataset rank

  2. This is the size in items.  Note that an item can have it's own
     internal size.  For example vectors have more then one component
     strings can have multiple characters, etc.

  3. The special size "*" means "fills the container", be it the 
     end of the stream, or the end of a packet.

  4. The special size "-" means this index is meaningless to this variable.
     The variable is just not a function of that index so any value is okay.
     (Note that "-" never appears in the dataset global space)

-->
<xs:simpleType name="VarIndexShape">
  <xs:restriction base="xs:string">
    <xs:pattern
      value="(-|\*|[1-9][0-9]*)(;(-|\*|[1-9][0-9]*))*"
    />
  </xs:restriction>
</xs:simpleType>

<xs:simpleType name="Star" final="restriction">
  <xs:restriction base="xs:string">
    <xs:enumeration value="*" />
  </xs:restriction>
</xs:simpleType>

<xs:simpleType name="EmptyStar" final="restriction">
  <xs:restriction base="xs:string">
    <xs:enumeration value="*" />
    <xs:enumeration value="" />
  </xs:restriction>
</xs:simpleType>

<xs:simpleType name="NonZeroStar">
  <xs:union memberTypes="Star xs:positiveInteger" />
</xs:simpleType>

<xs:simpleType name="Empty" >
  <xs:restriction base="xs:string">
    <xs:enumeration value="" />
  </xs:restriction>
</xs:simpleType>

<xs:simpleType name="IntTwoOrMore" >
  <xs:restriction base="xs:positiveInteger">
    <xs:minInclusive value="2" />
    <xs:maxInclusive value="2147483647" />
  </xs:restriction>
</xs:simpleType>

<xs:simpleType name="EmptyPosInt" >
  <xs:union memberTypes="IntTwoOrMore Empty" />
</xs:simpleType>

<!-- The data types for values, does not support ranges -->
<xs:simpleType name="ValueType">
  <xs:restriction base="xs:string">
      <xs:pattern value="bool|datetime|int|real|string" />
   </xs:restriction>
</xs:simpleType>

<!-- Encoding type missing since only utf8 is allowed -->

<xs:simpleType name="ValuesContent">
  <!-- The regex for scientific notation is looooong, just make sure
       illegal characters are not present -->       
  <xs:restriction base="xs:string">
    <xs:pattern value="[0-9\+\-;\.eE\s]*" />
    <xs:whiteSpace value="collapse" />
  </xs:restriction>
</xs:simpleType>

<xs:simpleType name="ValRepeat">
  <xs:restriction base="xs:string">
    <xs:pattern value="none|whole|each" />
  </xs:restriction>
</xs:simpleType>

<!-- Variable length data values

  By default no terminators are defined and an app must rely on itemBytes in
  <packet> is used to determine where fields end.  Alternatively fexible width
  fields may be used in one of two ways:

     1. Provide a length tag before each value, ex: "|17|Some event string"

     2. Provide a value terminator.  Unlike separators in most languages, 
        terminators MUST follow each value, even the last value.

  In either case, specify that values are variable length using itemsBytes="*"
  and if terminators are in use, give the terminator character which must be 
  from the set | \ ? : ; ~ # ^ @ $.

  The suggested value terminator is ";" though no default is given.
-->
<xs:simpleType name="Terminator" >
  <xs:restriction base="xs:string" >
    <xs:pattern value="[\|/\\\?:;~#\^@$]" />
    <xs:pattern value="\\n" />
    <!-- <xs:pattern value="[\|\\/\?:;~\^$#@]" /> -->
  </xs:restriction>
</xs:simpleType>

<!-- An array variable in the header -->
<xs:complexType name="Values">
  <xs:simpleContent>
     <xs:extension base="ValuesContent" >
      <xs:attribute name="repeat" type="ValRepeat" default="none" />
      <xs:attribute name="repetitions" type="xs:positiveInteger"/>

      <!-- Since values elements have a natural end point, no terminator
        is needed for the last value, so they are called separators here -->
      <xs:attribute name="valSep" type="Terminator" default=";" />

    </xs:extension>
  </xs:simpleContent>
</xs:complexType>

<xs:complexType name="Sequence">
  <xs:attribute name="use"      type="VarRole"  default="center" />
  <xs:attribute name="minval"   type="xs:double" use="required"/>
  <xs:attribute name="interval" type="xs:double" use="required"/>
  <xs:attribute name="repeat"   type="ValRepeat" default="none"/>
  <xs:attribute name="repetitions" type="xs:positiveInteger" />
</xs:complexType>

<xs:complexType name="Packet">
  <xs:attribute name="numItems"  use="required" /> 
  <xs:attribute name="itemBytes" type="NonZeroStar" />
  <!-- encoding is always text -->
  <xs:attribute name="valTerm"   type="Terminator"/>
  <xs:attribute name="fill"      type="xs:string" />
</xs:complexType>

<!-- The purposes for values of a variable -->

<xs:simpleType name="VarRole">
  <xs:restriction base="xs:string">
    <xs:enumeration value="center" />
    <xs:enumeration value="offset" />
    <xs:enumeration value="average" />
    <xs:enumeration value="count" />
    <xs:enumeration value="min" />
    <xs:enumeration value="reference" />  <!-- AKA the min -->
    <xs:enumeration value="max" />
    <xs:enumeration value="width" />
    <xs:enumeration value="std_dev" />
    <xs:enumeration value="min_error" />
    <xs:enumeration value="max_error" />    
  </xs:restriction>
</xs:simpleType>

<xs:complexType name="ScalarVar" >
  <xs:choice>
    <xs:element name="values" type="Values" />
    <xs:element name="sequence" type="Sequence" />
    <xs:element name="packet" type="Packet" />
  </xs:choice>
  <xs:attribute name="use"     type="VarRole" default="center" />
  <xs:attribute name="units"   type="xs:token" use="required" />
  <xs:attribute name="valType" type="ValueType" use="required" />
  <xs:attribute name="index"   type="VarIndexShape" use="required" />
</xs:complexType>

<!-- Vectors, Inherit from scalars and add elements ======== -->

<xs:complexType name="Component">
  <xs:attribute name="name" type="VarName" use="required" />
  <xs:attribute name="units" type="xs:token"/>
</xs:complexType>


<xs:simpleType name="VectorClass">
  <xs:restriction base="xs:string">
    <xs:enumeration value="cartesian" />
    <xs:enumeration value="polar" />
    <xs:enumeration value="spherical" />
    <!-- More?? -->
  </xs:restriction>
</xs:simpleType>

<xs:complexType name="VectorVar" >
  <xs:sequence>
    <xs:element name="component" type="Component" minOccurs="2" maxOccurs="3" />
    <xs:choice>
      <xs:element name="values" type="Values" />
      <xs:element name="sequence" type="Sequence" />
      <xs:element name="packet" type="Packet" />
    </xs:choice>
  </xs:sequence>
  <xs:attribute name="use"     type="VarRole" default="center" />
  <xs:attribute name="units"   type="xs:token" use="required" />
  <xs:attribute name="valType" type="ValueType" use="required" />
  <xs:attribute name="index"   type="VarIndexShape" use="required" />
  <xs:attribute name="vecClass"   type="VectorClass" use="required" />
</xs:complexType>


<!-- Physical Dimensions ================================================= -->

<xs:complexType name="CoordDim">
  <xs:sequence>
    <xs:element name="properties" type="Properties" minOccurs="0"/>

    <!-- For v3.0/basic only allow scalar types in coordinates -->
    <!-- <xs:choice minOccurs="1" maxOccurs="unbounded">  -->
    <xs:element name="scalar" type="ScalarVar" minOccurs="1" maxOccurs="unbounded"/>
    <!-- <xs:element name="vector" type="VectorVar" /> -->
    <!-- </xs:choice> -->

  </xs:sequence>
  <xs:attribute name="physDim" type="PhysDimName" use="required"/>
  <xs:attribute name="axis"    type="Direction"   use="required" />
</xs:complexType>

<xs:complexType name="DataDim">
  <xs:sequence>
    <xs:element name="properties" type="Properties" minOccurs="0"/>
    <xs:choice minOccurs="1" maxOccurs="unbounded">      
      <xs:element name="scalar" type="ScalarVar" />
      <xs:element name="vector" type="VectorVar" />
    </xs:choice>
  </xs:sequence>

  <xs:attribute name="physDim" type="PhysDimName" use="required"/>
  <!-- 
  Data items must have unique names, however the name inherits from the overall
  dataset name.  So if you only have one <data> or <extData> element, the name
  isn't needed
  -->
  <xs:attribute name="name" type="StructName" />
</xs:complexType>

<!-- Extended data objects in an extended data section -->
<xs:complexType name="DataObject">
  <xs:sequence>
    <xs:element name="packet" type="Packet" minOccurs="1" maxOccurs="unbounded" />
  </xs:sequence>

  <xs:attribute name="scheme"  type="xs:string" use="required" />
  <xs:attribute name="objType" type="xs:string" use="required" />
  <xs:attribute name="index" type="VarIndexShape" use="required" />
  <xs:attribute name="content" type="xs:string" />
</xs:complexType>

<xs:complexType name="ExtendedData">
  <xs:sequence>
    <xs:element name="properties" type="Properties" minOccurs="0"/>
    <xs:element name="object" type="DataObject" minOccurs="1" maxOccurs="unbounded" />
  </xs:sequence>

  <!-- 
  Extended data items must have unique names, however the name inherits 
  from the overall dataset name.  So if you only have one <data> or 
  <extData> element, the name isn't needed
  -->
  <xs:attribute name="name" type="StructName"/>
</xs:complexType>


<xs:simpleType name="DatasetRank">
  <xs:restriction base="xs:positiveInteger">
    <xs:minInclusive value="1" />
    <!-- High ranks are rarely needed, support as many independent indicies as the PDS -->
    <xs:maxInclusive value="8" />
  </xs:restriction>
</xs:simpleType>

<xs:simpleType name="DatasetName">
  <xs:restriction base="xs:string">
    <xs:pattern value="[a-zA-Z][a-zA-Z0-9_\.]*"/>
    <xs:maxLength value="63"/> <!-- leave rooom for null char -->
   </xs:restriction>
</xs:simpleType>

<xs:complexType name="Dataset">
  <xs:sequence>
    <xs:element name="properties" type="Properties" minOccurs="0" />
    <xs:element name="extension" type="Extension" minOccurs="0" maxOccurs="unbounded" />
    
    <!-- Axis patterns to check via schematron once implemented:       -->
    <!--                                                               -->
    <!--    axis="x" used for Cartesion x, xy or xyz                   -->
    <!--    axis="y" used for Cartesion xy or xyz                      -->
    <!--    axis="ρ" used for Cylindrical ρφz                          -->             
    <!--    axis="r" used for Polar rφ or Spherical rθφ                -->
    <!--    axis="θ" used for Spherical rθφ                            -->
    <!--    axis="φ" used for Cylindrical ρφz or Spherical or rθφ      --> 
    <!--    axis="z" used for Cartesian xyz or Cylindrical xyz or ρφz  -->
    <!--    axis="t" can be added to any to recommend a movie          -->
    
    <xs:element name="coord" type="CoordDim" minOccurs="1" maxOccurs="unbounded" />

    <!-- 
    To see if a set of data vary in less then the number of coordinate dimensions
    one needs to:
    
      1. Get the shape in index space of each coordinate physical-dimension
      2. Get the shape in index space of each data physical-dimension
      3. See if the intersection of the data index space and each coordinate index
         space is non-zero.

    This is a complex concept that needs explicit examples but it's the only way 
    I found to stream data that should be painted on the X-Y plane, with data that
    should be painted on the X-Z plane, with data that should be painted on the 
    Y-Z plane along with volumetric data in the middle.  I tried to make it simpler
    but could not think of a way to do so without repeating the limitations of the
    CDF ISTP metadata model. -cwp 2020-07-17
    -->
    
    <xs:element name="data" type="DataDim"   minOccurs="0" maxOccurs="unbounded" />
    <xs:element name="extData" type="ExtendedData" minOccurs="0" maxOccurs="unbounded" />

  </xs:sequence>

  <!-- "id" needed since there are no packet tags -->
  <xs:attribute name="id" type="xs:positiveInteger" use="required"/>

  <xs:attribute name="rank" type="DatasetRank" use="required" />
  <xs:attribute name="name" type="DatasetName" use="required"/>
  <xs:attribute name="index" type="DsIndexShape" use="required" />
  <xs:attribute name="plot"  type="PlotType" />

</xs:complexType>

<xs:complexType name="PacketData" >
  <xs:simpleContent>
    <xs:extension base="xs:string">
      <xs:attribute name="id" type="xs:positiveInteger" use="required"/>
    </xs:extension>
  </xs:simpleContent>
</xs:complexType>

<!-- Since patch levels don't affect API's we don't include the patch 
     level version number here -->
<xs:simpleType name="StreamVersion">
  <xs:restriction base="xs:string">
    <xs:pattern value="[0-9]{1,3}\.[0-9]{1,3}" />
  </xs:restriction>  
</xs:simpleType>

<xs:simpleType name="StreamType">
  <xs:restriction base="xs:string">
    <xs:enumeration value="das-basic-doc" />
  </xs:restriction>
</xs:simpleType>

<xs:complexType name="Stream">
  <xs:sequence>
    <xs:element name="properties" type="Properties" minOccurs="0"/>   
    <xs:element name="extension" type="Extension" minOccurs="0" maxOccurs="unbounded" />

    <xs:element name="dataset" type="Dataset" minOccurs="1"/>
    
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="dataset" type="Dataset" />
      <xs:element name="d" type="PacketData" />
    </xs:choice>
  
  </xs:sequence>
  <xs:attribute name="type" type="StreamType" use="required" />
  <xs:attribute name="version" type="StreamVersion" use="required" />
  <xs:attribute name="lang" type="ISO639_1" default="en"/>
</xs:complexType>

<xs:element name="stream" type="Stream" />

</xs:schema>

